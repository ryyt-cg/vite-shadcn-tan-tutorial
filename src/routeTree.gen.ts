/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import {Route as rootRoute} from './routes/__root'
import {Route as authenticatedRouteImport} from './routes/(authenticated)/route'
import {Route as authenticatedIndexImport} from './routes/(authenticated)/index'
import {Route as authenticatedAboutIndexImport} from './routes/(authenticated)/about/index'

// Create/Update Routes

const authenticatedRouteRoute = authenticatedRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRoute,
} as any)

const authenticatedIndexRoute = authenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

const authenticatedAboutIndexRoute = authenticatedAboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => authenticatedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/': {
      id: '/(authenticated)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
    '/(authenticated)/about/': {
      id: '/(authenticated)/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof authenticatedAboutIndexImport
      parentRoute: typeof authenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface authenticatedRouteRouteChildren {
  authenticatedIndexRoute: typeof authenticatedIndexRoute
  authenticatedAboutIndexRoute: typeof authenticatedAboutIndexRoute
}

const authenticatedRouteRouteChildren: authenticatedRouteRouteChildren = {
  authenticatedIndexRoute: authenticatedIndexRoute,
  authenticatedAboutIndexRoute: authenticatedAboutIndexRoute,
}

const authenticatedRouteRouteWithChildren =
    authenticatedRouteRoute._addFileChildren(authenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedIndexRoute
  '/about': typeof authenticatedAboutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authenticatedIndexRoute
  '/about': typeof authenticatedAboutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(authenticated)': typeof authenticatedRouteRouteWithChildren
  '/(authenticated)/': typeof authenticatedIndexRoute
  '/(authenticated)/about/': typeof authenticatedAboutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about'
  id:
      | '__root__'
      | '/(authenticated)'
      | '/(authenticated)/'
      | '/(authenticated)/about/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authenticatedRouteRoute: typeof authenticatedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authenticatedRouteRoute: authenticatedRouteRouteWithChildren,
}

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(authenticated)"
      ]
    },
    "/(authenticated)": {
      "filePath": "(authenticated)/route.tsx",
      "children": [
        "/(authenticated)/",
        "/(authenticated)/about/"
      ]
    },
    "/(authenticated)/": {
      "filePath": "(authenticated)/index.tsx",
      "parent": "/(authenticated)"
    },
    "/(authenticated)/about/": {
      "filePath": "(authenticated)/about/index.tsx",
      "parent": "/(authenticated)"
    }
  }
}
ROUTE_MANIFEST_END */
